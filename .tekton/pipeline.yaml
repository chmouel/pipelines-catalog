---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java-11-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, java
    tekton.dev/displayName: "s2i java 11 pipelineresource"
spec:
  description: >-
    s2i-java-11-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Java 11 builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - 'registry.access.redhat.com/openjdk/openjdk-11-rhel7'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-java-11-pr-repo
spec:
  type: git
  params:
    - name: url
      value: https://github.com/piyush-garg/spring-petclinic
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-java-11-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-java-11-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java-11
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java 11"
spec:
  description: >-
    s2i-java-11 task clones a Git repository and builds and
    pushes a container image using S2I and a Java 11 builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - 'registry.access.redhat.com/openjdk/openjdk-11-rhel7'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-java-11-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-go-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, go
    tekton.dev/displayName: "s2i go pipelineresource"
spec:
  description: >-
    s2i-go-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Go builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/devtools/go-toolset-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-go-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/golang-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-go-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-go-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-python-2
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, python, workspace
    tekton.dev/displayName: "s2i python 2"
spec:
  description: >-
    s2i-python-2 task clones a Git repository and builds and
    pushes a container image using S2I and a Python 2 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the python 2
      default: '7'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/python-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-python-2-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java-8-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, java
    tekton.dev/displayName: "s2i java 8 pipelineresource"
spec:
  description: >-
    s2i-java-8-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Java 8 builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - 'registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-java-8-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: "d367e2b4b41a2de899b0f438bc984a7c1c011b77"
    - name: url
      value: https://github.com/spring-projects/spring-petclinic
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-java-8-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-java-8-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-ruby
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, ruby, workspace
    tekton.dev/displayName: "s2i ruby"
spec:
  description: >-
    s2i-ruby task clones a Git repository and builds and
    pushes a container image using S2I and a Ruby builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the ruby
      default: '5'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/ruby-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-ruby-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-python-3
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, python, workspace
    tekton.dev/displayName: "s2i python 3"
spec:
  description: >-
    s2i-python-3 task clones a Git repository and builds and
    pushes a container image using S2I and a Python 3 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the python 3
      default: '6'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/python-3$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-python-3-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-2
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet, workspace
    tekton.dev/displayName: "s2i dotnet 2"
spec:
  description: >-
    s2i-dotnet-2 task clones a Git repository and builds and
    pushes a container image using S2I and a .NET Core 2 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 2
      default: '2'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/dotnet/dotnet-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-dotnet-2-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-3-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet
    tekton.dev/displayName: "s2i dotnet 3 pipelineresource"
spec:
  description: >-
    s2i-dotnet-3-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core 3 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 3
      default: '1'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/dotnet:3.$(params.MINOR_VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-3-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: "dotnetcore-3.1"
    - name: url
      value: https://github.com/redhat-developer/s2i-dotnetcore-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-3-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-3-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-3
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet, workspace
    tekton.dev/displayName: "s2i dotnet 3"
spec:
  description: >-
    s2i-dotnet-3 task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core 3 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 3
      default: '1'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/dotnet:3.$(params.MINOR_VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-dotnet-3-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-2-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet
    tekton.dev/displayName: "s2i dotnet 2 pipelineresource"
spec:
  description: >-
    s2i-dotnet-2-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core 2 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 2
      default: '2'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/dotnet/dotnet-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-2-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: dotnetcore-2.2
    - name: url
      value: https://github.com/redhat-developer/s2i-dotnetcore-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-2-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-2-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-ruby-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, ruby
    tekton.dev/displayName: "s2i ruby pipelineresource"
spec:
  description: >-
    s2i-ruby-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Ruby builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the ruby
      default: '5'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/ruby-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-ruby-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/ruby-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-ruby-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-ruby-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-1-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet
    tekton.dev/displayName: "s2i dotnet 1 pipelineresource"
spec:
  description: >-
    s2i-dotnet-1-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core 1 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 1
      default: '1'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/dotnet/dotnetcore-1$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-1-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: dotnetcore-1.1
    - name: url
      value: https://github.com/redhat-developer/s2i-dotnetcore-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-dotnet-1-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-1-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-go
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, go, workspace
    tekton.dev/displayName: "s2i go"
spec:
  description: >-
    s2i-go task clones a Git repository and builds and
    pushes a container image using S2I and a Go builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/devtools/go-toolset-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-go-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-php
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, php, workspace
    tekton.dev/displayName: "s2i php"
spec:
  description: >-
    s2i-php task clones a Git repository and builds and
    pushes a container image using S2I and a PHP builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the php
      default: '3'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/php:7.$(params.MINOR_VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-php-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.14.3"
    tekton.dev/tags: buildah
    tekton.dev/displayName: "buildah pipelineresource"
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.

  params:
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: Path to the directory to use as context.
      default: .
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image

  steps:
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: /workspace/source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--format=$(params.FORMAT)', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '$(params.DOCKERFILE)', '-t', '$(resources.outputs.image.url)', '$(params.CONTEXT)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: /workspace/source
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: buildah-pr-nocode
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/kelseyhightower/nocode
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: buildah-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-1"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-nodejs
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, nodejs, workspace
    tekton.dev/displayName: "s2i nodejs"
spec:
  description: >-
    s2i-nodejs task clones a Git repository and builds and
    pushes a container image using S2I and a nodejs builder image.

  params:
    - name: VERSION
      description: The version of the nodejs
      default: '12'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/nodejs:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-nodejs-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-php-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, php
    tekton.dev/displayName: "s2i php pipelineresource"
spec:
  description: >-
    s2i-php-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a PHP builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the php
      default: '3'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/php:7.$(params.MINOR_VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-php-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/s2i-php-container/
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-php-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-php-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-1
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet, workspace
    tekton.dev/displayName: "s2i dotnet 1"
spec:
  description: >-
    s2i-dotnet-1 task clones a Git repository and builds and
    pushes a container image using S2I and a .NET Core 1 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 1
      default: '1'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/dotnet/dotnetcore-1$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-dotnet-1-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-python-2-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, python
    tekton.dev/displayName: "s2i python 2 pipelineresource"
spec:
  description: >-
    s2i-python-2-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Python 2 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the python 2
      default: '7'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/python-2$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-python-2-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/django-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-python-2-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-python-2-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-python-3-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, python
    tekton.dev/displayName: "s2i python 3 pipelineresource"
spec:
  description: >-
    s2i-python-3-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a Python 3 builder image.

  params:
    - name: MINOR_VERSION
      description: The minor version of the python 3
      default: '6'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/rhscl/python-3$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-python-3-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/django-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-python-3-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-python-3-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-nodejs-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, nodejs
    tekton.dev/displayName: "s2i nodejs pipelineresource"
spec:
  description: >-
    s2i-nodejs-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a nodejs builder image.

  params:
    - name: VERSION
      description: The version of the nodejs
      default: '12'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: /workspace/source
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/nodejs:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-nodejs-pr-repo
spec:
  type: git
  params:
    - name: revision
      value: master
    - name: url
      value: https://github.com/sclorg/nodejs-ex
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: s2i-nodejs-pr-image
spec:
  type: image
  params:
    - name: url
      value: "image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-nodejs-pr"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java-8
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java 8"
spec:
  description: >-
    s2i-java-8 task clones a Git repository and builds and
    pushes a container image using S2I and a Java 8 builder image.

  params:
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - 'registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: quay.io/buildah/stable:v1.17.0
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-java-8-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipelines-catalog
spec:
  params:
    - name: repo_url
    - name: revision
  workspaces:
    - name: source
    - name: s2i-java-11-workspace
    - name: s2i-python-2-workspace
    - name: s2i-ruby-workspace
    - name: s2i-python-3-workspace
    - name: s2i-dotnet-2-workspace
    - name: s2i-dotnet-3-workspace
    - name: s2i-go-workspace
    - name: s2i-php-workspace
    - name: s2i-nodejs-workspace
    - name: s2i-dotnet-1-workspace
    - name: s2i-java-8-workspace
    
  resources:
    - name: s2i-java-11-pr-repo
      type: git
    - name: s2i-java-11-pr-image
      type: image
    - name: s2i-go-pr-repo
      type: git
    - name: s2i-go-pr-image
      type: image
    - name: s2i-java-8-pr-repo
      type: git
    - name: s2i-java-8-pr-image
      type: image
    - name: s2i-dotnet-3-pr-repo
      type: git
    - name: s2i-dotnet-3-pr-image
      type: image
    - name: s2i-dotnet-2-pr-repo
      type: git
    - name: s2i-dotnet-2-pr-image
      type: image
    - name: s2i-ruby-pr-repo
      type: git
    - name: s2i-ruby-pr-image
      type: image
    - name: s2i-dotnet-1-pr-repo
      type: git
    - name: s2i-dotnet-1-pr-image
      type: image
    - name: buildah-pr-nocode
      type: git
    - name: buildah-pr-image
      type: image
    - name: s2i-php-pr-repo
      type: git
    - name: s2i-php-pr-image
      type: image
    - name: s2i-python-2-pr-repo
      type: git
    - name: s2i-python-2-pr-image
      type: image
    - name: s2i-python-3-pr-repo
      type: git
    - name: s2i-python-3-pr-image
      type: image
    - name: s2i-nodejs-pr-repo
      type: git
    - name: s2i-nodejs-pr-image
      type: image
    
  
  tasks:

    - name: fetch
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
      workspaces:
        - name: output
          workspace: source

    - name: yaml-lint
      runAfter: [fetch]
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: yaml-lint
            # we get bumped out when using hte official image with docker.io
            # ratelimit so workaround this.
            image: registry.access.redhat.com/ubi8/python-38
            workingdir: $(workspaces.source.path)
            script: |
              pip install yamllint
              yamllint .tekton/ task/

    - name: kubectl-dry-run
      runAfter: [fetch]
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: kubectl-apply-check
            # TODO: find an UBI with kubectl
            image: quay.io/openshift/origin-cli:4.6
            workingdir: $(workspaces.source.path)
            script: |
              for i in task/*/*/;do kubectl apply -f ${i} --dry-run=client;done
      workspaces:
        - name: source
          workspace: source

    - name: check-generated-yaml
      runAfter: [fetch]
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: check-generated-yaml
            workingdir: $(workspaces.source.path)
            image: registry.access.redhat.com/ubi8/python-38
            # For whatever reason, make check is not working, so let's do this with
            # git filename instead which should be as a robust check and we don't
            # have to care having to maintain a dockerfile for it.
            script: |
              #!/usr/bin/env bash
              set -exu
              CHANGED_FILES=($(git log HEAD --pretty="format:" --name-only  -1))
              needregen=
              for yaml in ${CHANGED_FILES[*]};do
                  [[ ${yaml} == .tekton/pipeline.yaml ]] && { exit 0 ;}
                  [[ ${yaml} == task/*/*yaml || ${yaml} == openshift/gen/*yaml ]] && needregen=1
              done
              [[ -n ${needregen} ]] && {
                  echo "There was some yaml modifications but pipeline.yaml wasn't generated"
                  echo "Rerun make generated"
                  exit  1
              }

    - name: prestep
      runAfter: [kubectl-dry-run, yaml-lint, check-generated-yaml]
      taskSpec:
        steps:
          - name: prestep-mind-the-gap
            image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
            script: |
              echo "OK: pre-step has passed"

    - name: s2i-java-11-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-java-11-pr-repo
        outputs:
        - name: image
          resource: s2i-java-11-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-java-11-pr

    - name: fetch-repository-s2i-java-11
      params:
      - name: url
        value: https://github.com/piyush-garg/spring-petclinic
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: main
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-java-11-workspace
    - name: s2i-java-11-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-java-11
      runAfter:
      - fetch-repository-s2i-java-11
      taskRef:
        name: s2i-java-11
      workspaces:
      - name: source
        workspace: s2i-java-11-workspace

    - name: s2i-go-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-go-pr-repo
        outputs:
        - name: image
          resource: s2i-go-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-go-pr

    - name: fetch-repository-s2i-python-2
      params:
      - name: url
        value: https://github.com/sclorg/django-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-python-2-workspace
    - name: s2i-python-2-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-python-2
      runAfter:
      - fetch-repository-s2i-python-2
      taskRef:
        name: s2i-python-2
      workspaces:
      - name: source
        workspace: s2i-python-2-workspace

    - name: s2i-java-8-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-java-8-pr-repo
        outputs:
        - name: image
          resource: s2i-java-8-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-java-8-pr

    - name: fetch-repository-s2i-ruby
      params:
      - name: url
        value: https://github.com/sclorg/ruby-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-ruby-workspace
    - name: s2i-ruby-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-ruby
      runAfter:
      - fetch-repository-s2i-ruby
      taskRef:
        name: s2i-ruby
      workspaces:
      - name: source
        workspace: s2i-ruby-workspace

    - name: fetch-repository-s2i-python-3
      params:
      - name: url
        value: https://github.com/sclorg/django-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-python-3-workspace
    - name: s2i-python-3-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-python-3
      runAfter:
      - fetch-repository-s2i-python-3
      taskRef:
        name: s2i-python-3
      workspaces:
      - name: source
        workspace: s2i-python-3-workspace

    - name: fetch-repository-s2i-dotnet-2
      params:
      - name: url
        value: https://github.com/redhat-developer/s2i-dotnetcore-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: dotnetcore-2.2
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-dotnet-2-workspace
    - name: s2i-dotnet-2-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-2
      runAfter:
      - fetch-repository-s2i-dotnet-2
      taskRef:
        name: s2i-dotnet-2
      workspaces:
      - name: source
        workspace: s2i-dotnet-2-workspace

    - name: s2i-dotnet-3-pr-run
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      resources:
        inputs:
        - name: source
          resource: s2i-dotnet-3-pr-repo
        outputs:
        - name: image
          resource: s2i-dotnet-3-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-dotnet-3-pr

    - name: fetch-repository-s2i-dotnet-3
      params:
      - name: url
        value: https://github.com/redhat-developer/s2i-dotnetcore-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: dotnetcore-3.1
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-dotnet-3-workspace
    - name: s2i-dotnet-3-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-3
      runAfter:
      - fetch-repository-s2i-dotnet-3
      taskRef:
        name: s2i-dotnet-3
      workspaces:
      - name: source
        workspace: s2i-dotnet-3-workspace

    - name: s2i-dotnet-2-pr-run
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      resources:
        inputs:
        - name: source
          resource: s2i-dotnet-2-pr-repo
        outputs:
        - name: image
          resource: s2i-dotnet-2-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-dotnet-2-pr

    - name: s2i-ruby-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-ruby-pr-repo
        outputs:
        - name: image
          resource: s2i-ruby-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-ruby-pr

    - name: s2i-dotnet-1-pr-run
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      resources:
        inputs:
        - name: source
          resource: s2i-dotnet-1-pr-repo
        outputs:
        - name: image
          resource: s2i-dotnet-1-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-dotnet-1-pr

    - name: fetch-repository-s2i-go
      params:
      - name: url
        value: https://github.com/sclorg/golang-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-go-workspace
    - name: s2i-go-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-go
      runAfter:
      - fetch-repository-s2i-go
      taskRef:
        name: s2i-go
      workspaces:
      - name: source
        workspace: s2i-go-workspace

    - name: fetch-repository-s2i-php
      params:
      - name: url
        value: https://github.com/sclorg/s2i-php-container/
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-php-workspace
    - name: s2i-php-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: test/test-app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-php
      runAfter:
      - fetch-repository-s2i-php
      taskRef:
        name: s2i-php
      workspaces:
      - name: source
        workspace: s2i-php-workspace

    - name: buildah-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: buildah-pr-nocode
        outputs:
        - name: image
          resource: buildah-pr-image
      runAfter:
      - prestep
      taskRef:
        name: buildah-pr

    - name: fetch-repository-s2i-nodejs
      params:
      - name: url
        value: https://github.com/sclorg/nodejs-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-nodejs-workspace
    - name: s2i-nodejs-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-nodejs
      runAfter:
      - fetch-repository-s2i-nodejs
      taskRef:
        name: s2i-nodejs
      workspaces:
      - name: source
        workspace: s2i-nodejs-workspace

    - name: s2i-php-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: test/test-app
      resources:
        inputs:
        - name: source
          resource: s2i-php-pr-repo
        outputs:
        - name: image
          resource: s2i-php-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-php-pr

    - name: fetch-repository-s2i-dotnet-1
      params:
      - name: url
        value: https://github.com/redhat-developer/s2i-dotnetcore-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: dotnetcore-1.1
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-dotnet-1-workspace
    - name: s2i-dotnet-1-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet-1
      runAfter:
      - fetch-repository-s2i-dotnet-1
      taskRef:
        name: s2i-dotnet-1
      workspaces:
      - name: source
        workspace: s2i-dotnet-1-workspace

    - name: s2i-python-2-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-python-2-pr-repo
        outputs:
        - name: image
          resource: s2i-python-2-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-python-2-pr

    - name: s2i-python-3-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-python-3-pr-repo
        outputs:
        - name: image
          resource: s2i-python-3-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-python-3-pr

    - name: s2i-nodejs-pr
      params:
      - name: TLSVERIFY
        value: 'false'
      resources:
        inputs:
        - name: source
          resource: s2i-nodejs-pr-repo
        outputs:
        - name: image
          resource: s2i-nodejs-pr-image
      runAfter:
      - prestep
      taskRef:
        name: s2i-nodejs-pr

    - name: fetch-repository-s2i-java-8
      params:
      - name: url
        value: https://github.com/spring-projects/spring-petclinic
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: d367e2b4b41a2de899b0f438bc984a7c1c011b77
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-java-8-workspace
    - name: s2i-java-8-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-java-8
      runAfter:
      - fetch-repository-s2i-java-8
      taskRef:
        name: s2i-java-8
      workspaces:
      - name: source
        workspace: s2i-java-8-workspace

finally:
    - name: finally
      taskSpec:
        steps:
          - name: send-to-slack
            env:
              - name: SLACK_WEBHOOK_URL
                valueFrom:
                  secretKeyRef:
                    name: slack-tektoncd-ci-webhook
                    key: hook_url
              - name: PIPELINERUN
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.labels['tekton.dev/pipelineRun']
            image: quay.io/chmouel/tekton-asa-code:latest
            script: |
              #!/usr/bin/env python3
              import subprocess
              import sys
              import json
              import os
              from urllib.request import Request, urlopen

              image_failure_png = 'https://www.vhv.rs/dpng/d/415-4154815_grumpy-cat-png-photos-grumpy-cat-png-transparent.png'
              image_success_png = 'https://github.com/tektoncd.png'

              label_to_search = "nightly-ci"
              labels = eval("""{{pull_request.labels}}""")
              console_url = """{{openshift_console_pipelinerun_href}}"""
              pull_request_url = """{{pull_request.html_url}}"""

              print(console_url)
              print(pull_request_url)

              # Check if the PR has nightly CI
              isnightly_ci = [x for x in labels if x['name'] == label_to_search]

              if not isnightly_ci:
                  print("Not a nightly CI PR: skipping the reporting to slack")
                  sys.exit(0)

              # Check the status of the pipelinerun
              ret = subprocess.run(
                  f"kubectl get pipelinerun {os.environ.get('PIPELINERUN', 'unkown')} -o json",
                  shell=True,
                  check=True,
                  capture_output=True)

              if ret.returncode != 0:
                  print("Error retrieving pipelinerun status")
                  sys.exit(1)

              pr = json.loads(ret.stdout)
              # The Running is safe here, because it's the finally task where we are at.
              failed = []
              taskRuns = pr['status']['taskRuns']
              for task in taskRuns.keys():
                  if len([
                          x['message'] for x in taskRuns[task]['status']['conditions']
                          if x['status'] != 'Running' and x['status'] == 'False'
                  ]) > 0:
                      failed.append(task)

              if failed:
                  subject = f"OpenShift Pipelines CI has failed on {pull_request_url} " \
                      ":fb-sad: :crying_cat_face: :crying:"
                  image_url = image_failure_png
                  text = f"""• *Failed Tasks*: {", ".join(failed)}
              • *PipelineRun logs*: {console_url}
                """
              else:
                  subject = f"OpenShift Pipelines CI ran succesfully on {pull_request_url} " \
                      ":pipelinedance: :dancing-penguin: :yay2:"
                  image_url = image_success_png
                  text = f"""
                  • *PipelineRun logs*: {console_url}
                """

              msg = {
                  "text":
                  subject,
                  "attachments": [{
                      "blocks": [
                          {
                              "type": "section",
                              "text": {
                                  "type": "mrkdwn",
                                  "text": text,
                              },
                              "accessory": {
                                  "type": "image",
                                  "image_url": image_url,
                                  "alt_text": "TektonCD CI"
                              }
                          },
                      ]
                  }]
              }
              req = Request(os.environ.get("SLACK_WEBHOOK_URL"),
                            data=json.dumps(msg).encode(),
                            headers={"Content-type": "application/json"},
                            method="POST")
              # TODO: Handle error?
              print(urlopen(req).read().decode())
              print("slack message has been sent")
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipelines-catalog-run
spec:
  
  pipelineRef:
    name: pipelines-catalog
  params:
    - name: repo_url
      value: {{repo_url}}
    - name: revision
      value: {{revision}}
    
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 500Mi
  
    - name: s2i-java-11-workspace
      persistentvolumeclaim:
        claimName: s2i-java-11-workspace
    - name: s2i-python-2-workspace
      persistentvolumeclaim:
        claimName: s2i-python-2-workspace
    - name: s2i-ruby-workspace
      persistentvolumeclaim:
        claimName: s2i-ruby-workspace
    - name: s2i-python-3-workspace
      persistentvolumeclaim:
        claimName: s2i-python-3-workspace
    - name: s2i-dotnet-2-workspace
      persistentvolumeclaim:
        claimName: s2i-dotnet-2-workspace
    - name: s2i-dotnet-3-workspace
      persistentvolumeclaim:
        claimName: s2i-dotnet-3-workspace
    - name: s2i-go-workspace
      persistentvolumeclaim:
        claimName: s2i-go-workspace
    - name: s2i-php-workspace
      persistentvolumeclaim:
        claimName: s2i-php-workspace
    - name: s2i-nodejs-workspace
      persistentvolumeclaim:
        claimName: s2i-nodejs-workspace
    - name: s2i-dotnet-1-workspace
      persistentvolumeclaim:
        claimName: s2i-dotnet-1-workspace
    - name: s2i-java-8-workspace
      persistentvolumeclaim:
        claimName: s2i-java-8-workspace
    
  
  
  resources:
    - name: s2i-java-11-pr-repo
      resourceRef:
        name: s2i-java-11-pr-repo
    - name: s2i-java-11-pr-image
      resourceRef:
        name: s2i-java-11-pr-image
    - name: s2i-go-pr-repo
      resourceRef:
        name: s2i-go-pr-repo
    - name: s2i-go-pr-image
      resourceRef:
        name: s2i-go-pr-image
    - name: s2i-java-8-pr-repo
      resourceRef:
        name: s2i-java-8-pr-repo
    - name: s2i-java-8-pr-image
      resourceRef:
        name: s2i-java-8-pr-image
    - name: s2i-dotnet-3-pr-repo
      resourceRef:
        name: s2i-dotnet-3-pr-repo
    - name: s2i-dotnet-3-pr-image
      resourceRef:
        name: s2i-dotnet-3-pr-image
    - name: s2i-dotnet-2-pr-repo
      resourceRef:
        name: s2i-dotnet-2-pr-repo
    - name: s2i-dotnet-2-pr-image
      resourceRef:
        name: s2i-dotnet-2-pr-image
    - name: s2i-ruby-pr-repo
      resourceRef:
        name: s2i-ruby-pr-repo
    - name: s2i-ruby-pr-image
      resourceRef:
        name: s2i-ruby-pr-image
    - name: s2i-dotnet-1-pr-repo
      resourceRef:
        name: s2i-dotnet-1-pr-repo
    - name: s2i-dotnet-1-pr-image
      resourceRef:
        name: s2i-dotnet-1-pr-image
    - name: buildah-pr-nocode
      resourceRef:
        name: buildah-pr-nocode
    - name: buildah-pr-image
      resourceRef:
        name: buildah-pr-image
    - name: s2i-php-pr-repo
      resourceRef:
        name: s2i-php-pr-repo
    - name: s2i-php-pr-image
      resourceRef:
        name: s2i-php-pr-image
    - name: s2i-python-2-pr-repo
      resourceRef:
        name: s2i-python-2-pr-repo
    - name: s2i-python-2-pr-image
      resourceRef:
        name: s2i-python-2-pr-image
    - name: s2i-python-3-pr-repo
      resourceRef:
        name: s2i-python-3-pr-repo
    - name: s2i-python-3-pr-image
      resourceRef:
        name: s2i-python-3-pr-image
    - name: s2i-nodejs-pr-repo
      resourceRef:
        name: s2i-nodejs-pr-repo
    - name: s2i-nodejs-pr-image
      resourceRef:
        name: s2i-nodejs-pr-image
    
  
